//모듈을 추출합니다.
var socketio = require('socket.io');
var express = require('express');
var http = require('http');
var engine = require('ejs-locals')
var routes = require('./routes');
var main = require('./routes/main2');
var rtc = require('./routes/rtc'); //추가
var path = require('path');
//** Connect 시 socket 정보 저장을 위해 Connect,Cookie,Connect-mongo 이용**//
var connect = require('connect');
var cookie = require('cookie');
var MongoStore = require('connect-mongo')(express);
var session_store = new MongoStore({url: 'mongodb://localhost:27017/banana'});


//웹 서버를 생성합니다.
var app =express();

//웹 서버 환경 설정을 합니다.
app.set('port', process.env.PORT || 9005); 
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(express.favicon());
app.use(express.logger('dev'));
app.use(express.json());
app.use(express.urlencoded());
app.use(express.methodOverride());
//app.use(express.bodyParser());///?

//session
app.use(express.bodyParser());
app.use(express.cookieParser());
app.configure(function(){
		app.use(express.session({store : session_store,secret: "keyboard cat"}));
});

app.use(app.router); //반드시 session 뒤에 와야 한다.
app.use(express.static(path.join(__dirname, 'public')));

app.engine('ejs',engine);

//development only
if ('development' == app.get('env')) {
  app.use(express.errorHandler());
}


//API를 위한 페이지 라우팅을 처리합니다.
app.get('/', routes.index);
app.post('/member_insert', routes.member_insert);
app.post('/member_select', routes.member_select);
app.get('/main', main.index);
app.post('/rtc', rtc.index);
app.get('/member_list', main.member_list);
app.get('/get_id',rtc.post_id);
app.get('/my_session',main.my_session);
//app.post('/modify', routes.modify);
//app.post('/del', routes.del);


//웹 서버를 실행합니다.
var server=http.createServer(app);
server.listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});


//소켓서버를 생성합니다.
var io=socketio.listen(server);

function get_connect_sid(socket){
	//소켓ID Session에 Update
	var cookie_string = socket.handshake.headers.cookie;
	var parsed_cookies = 
		connect.utils.parseSignedCookies(cookie.parse(decodeURIComponent(cookie_string)),'keyboard cat');
	var connect_sid = parsed_cookies['connect.sid'];
	return connect_sid;
}

//소켓 연결 이벤트 리스너
io.sockets.on('connection', function(socket){
	console.log('connect');
	var connect_sid = get_connect_sid(socket);
	if (connect_sid) {
		session_store.get(connect_sid, function (error, session) {
			session.socketID = socket.id;
			session_store.set(connect_sid,session);
			socket.set('session_id',connect_sid);
			console.log('socketID ' + session.socketID);
		});
	}
	

	socket.on('get_session',function(){
		var connect_sid = get_connect_sid(socket);
		if (connect_sid) {
			session_store.get(connect_sid, function (error, session) {
				io.sockets.sockets[socket.id].emit('get_session',session);
				console.log('get_session.socketID ' + session.socketID);
			});
		}	
	});
	socket.on('disconnect',function(){
	});
	socket.on('connect', function(message){
	});
	socket.on('message', function(message) {
		console.log("Message: " + message.type + "Receiver : "+message.receiver);
		var recv = message.receiver.socketID;
		console.log("idx: " + message.receiver.socketID);
		io.sockets.sockets[recv].emit('message',message);
		console.log("Message: " + message.type + "Receiver : "+message.receiver.email);
    });

	//화상채팅요청
	socket.on('videocam_req',function(send_session,socketID) {
		console.log("videocam_req : " + send_session.email + ", " + send_session.name + ", " + send_session.socketID);
		console.log("mysocketID : " + socket.id);
		console.log("sendsocketID : " + socketID);
		io.sockets.sockets[socketID].emit('videocam_req',send_session);
	});
	//화상채팅요청수락
	socket.on('videocam_res',function(session,socketID,req){
		console.log("videocam_res");
		console.log("mysocketID : " + session.socketID);
		console.log("sendsocketID : " + socketID);
		console.log("req : " + req);
		io.sockets.sockets[socketID].emit('videocam_res',session,req);
	});
	//한명이 들어왔다고 알림
	socket.on('peer_connect',function(session,socketID){
		socket.get('room',function(error, room){
			console.log("peer_connect");
			socket.broadcast.to(room).emit('peer_connect', session);
		});
	});
	//방 생성
	socket.on('create_room',function(session,socketID){
		console.log("create_room");
		socket.join(session.id);
		socket.set('room',session.id);
		io.sockets.sockets[socketID].emit('create_room',session);
	});
	//방 진입 요청
	socket.on('request_join_room',function(session,socketID,roomName){
		console.log("request_join_room");
		io.sockets.sockets[socketID].emit('request_join_room',session,roomName);
	});
	//방에 들어감
	socket.on('join_room',function(recv_session,sender_session,roomName){
		console.log("join_room");
		socket.join(roomName);
		socket.set('room',roomName);
		io.sockets.sockets[recv_session.socketID].emit('join_room',sender_session,recv_session);
	});
	//접속자 세션 리스트를 보냄
	socket.on('send_connlist',function(session,socketID,list){
		console.log("send_connlist");
		io.sockets.sockets[socketID].emit('start_rtc',session,list);
	});
});
